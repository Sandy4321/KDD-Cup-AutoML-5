import numpy as np

from optable.synthesis import meta_feature as meta_feature_mod


USE_LEARNED_PRIORITY = True


learned_weight_with_plus_restrict_of_feature_importance = np.array([
    1.95736349e-01, 2.43198164e-02, 1.25749722e-01, 1.92912683e-01,
    1.13415754e+00, 6.60585687e-02, 6.87092030e-03, 1.26865172e+00,
    1.96205929e-01, 1.92066841e-02, 1.27378523e+00, 4.37696666e-01,
    1.34445578e-01, 2.30863411e-02, 1.19145766e-01, 7.08721858e-03,
    3.24899405e-01, 2.92652190e-01, 1.37543147e-02, 1.77816506e-02,
    7.25257635e-01, 3.25448930e-01, 3.62393484e-02, 3.02063048e-01,
    2.51826912e-01, 7.00901985e-01, 2.63421178e-01, 1.71044674e-02,
    1.00547087e+00, 7.38065302e-01, 6.93862187e-03, 2.69017667e-02,
    9.60492492e-01, 8.83362591e-02, 4.62234393e-03, 7.62033284e-01,
    7.47628883e-02, 3.19462121e-02, 1.98276900e-02, 4.15455876e-03,
    6.19458914e-01, 6.97322562e-03, 9.91322473e-03, 9.91322473e-03,
    9.91322473e-03, 7.31564034e-03, 7.31564034e-03, 6.23351801e-03,
    6.93147182e-01, 1.48182386e-03, 6.80618593e-03, 1.52126634e+00,
    6.93147182e-01, 1.49032056e+00, 3.44961113e-03, 6.13576267e-03,
    6.93147182e-01, 1.63643938e-02, 4.33732808e-01, 6.04819134e-03,
    6.93147182e-01, 1.58727244e-02
])
learned_weight_with_plus_restrict_of_feature_importance[-8] += 1
learned_weight_with_plus_restrict_of_feature_importance /= \
    learned_weight_with_plus_restrict_of_feature_importance[
        list(meta_feature_mod.meta_feature_start.values())
    ].std()

learned_weight_with_plus_restrict_of_permutation_importance = np.array([
    0.45802802, 0.45802802, 0.38208726, 0.38208726, 0.38212824,
    0.4054901, 0.4054901, 0.2615829, 0.40728304, 0.40728304,
    0.16218582, 0.39415967, 0.39415967, 0.24906072, 0.38247764,
    0.38247764, 0.21461482, 0.39096743, 0.39096743, 0.40914488,
    0.40865925, 0.40865925, 0.36863464, 0.32396102, 0.32396102,
    0.47211555, 0.42755854, 0.42755854, 0.3336544, 0.4149297,
    0.4149297, 0.36044967, 0.44867846, 0.44867846, 0.3457127,
    0.46777713, 0.46777713, 0.44637972, 0.37492204, 0.37492204,
    0.2973954, 0.6931472, 0.6931472, 0.6931472, 0.6931472,
    0.6931472, 0.6931472, 0.6931472, 0.6931472, 0.73932385,
    0.6931472, 0.6931472, 0.6931472, 0.6931472, 1.1238573,
    0.6931472, 0.6931472, 0.6931472, 0.6931472, 0.11173283,
    0.6931472, 0.6931472])
learned_weight_with_plus_restrict_of_permutation_importance /= \
    learned_weight_with_plus_restrict_of_permutation_importance[
        list(meta_feature_mod.meta_feature_start.values())
    ].std()

learned_weight_with_classification = np.array([
    5.5381393e-01, 3.2098293e-01, 8.5163701e-01, 2.0478478e-01,
    1.8248122e+00, 9.7358477e-01, 4.3332092e-02, 1.6384097e+00,
    1.3823981e+00, 2.6629666e-02, 2.1590266e-01, 1.0542868e+00,
    4.4668147e-01, 2.2691004e-01, 9.9747610e-01, 9.5376037e-03,
    2.9554570e-01, 6.1763501e-01, 2.3387931e-01, 3.0306071e-01,
    3.7290415e-01, 1.9447830e+00, 4.0009671e-01, 1.2977945e-02,
    5.7089534e-03, 2.1220291e+00, 2.5077051e-01, 4.0879664e-03,
    9.5779145e-01, 8.3577007e-01, 1.1133221e-02, 4.2973828e-02,
    1.7548654e+00, 2.6955117e-02, 8.3909556e-02, 1.3117292e+00,
    1.6897734e-01, 3.0988353e-01, 5.4540938e-01, 3.6116976e-01,
    1.0985575e+00, 6.9314718e-01, 6.7458165e-01, 6.7458165e-01,
    6.7458165e-01, 1.4351088e+00, 1.4351088e+00, 1.6618878e+00,
    4.2184599e-02, 4.9062292e-03, 5.0912113e-03, 5.3386302e+00,
    6.9314718e-01, 2.9581766e+00, 2.0263829e+00, 2.2119489e-01,
    6.9314718e-01, 5.5386674e-02, 1.4002986e+01, 1.0974896e-02,
    6.9314718e-01, 9.3069754e+00])
learned_weight_with_classification = np.array([
    6.4575022e-01,  8.4949106e-02, -9.0500867e-01,  6.8054175e-01,
    3.2308443e+00,  1.1963038e+00, -6.4893907e-01,  1.2136056e+00,
    1.8829330e+00, -8.7967819e-01,  5.6540298e-01, -1.6517133e-01,
    2.1607511e+00, -1.6390033e+00,  1.9590539e+00, -1.5626121e+00,
    9.8088688e-01, -5.0167149e-01,  7.7920508e-01,  1.2927933e+00,
    -4.4014069e-01,  2.2717853e+00,  1.6164721e+00, -2.1888969e+00,
    -2.8721425e-01,  7.2262406e+00,  3.1914616e+00, -3.5889447e+00,
    2.8550866e+00,  3.8552227e+00, -2.1326244e+00, -1.4610059e+00,
    3.9933007e+00, -1.6632357e+00, -1.2985203e+00,  1.7444273e+00,
    4.9810197e-02, -1.4929082e+00, -3.4018275e-01,  8.5620195e-01,
    1.4922532e+00, -6.2759447e+00,  5.4573286e-01,  5.4573286e-01,
    5.4573286e-01, -1.4421919e-02, -1.4421919e-02, -1.0835267e+00,
    9.9261574e-02, -1.1367732e+00, -5.1015508e-01,  5.5110173e+00,
    0.0000000e+00,  3.1822066e+00,  1.6089880e+00, -1.6089255e+00,
    0.0000000e+00,  2.5102251e+00,  1.8950827e+01, -2.3313243e+00,
    0.0000000e+00,  7.7504396e+00])
"""
learned_weight_with_classification = np.array([
    3.1278467e-01, -1.5484670e-01, -9.9355978e-01,  1.0492703e-02,
    3.3372204e+00,  5.1331997e-01, -7.5658762e-01,  1.1456048e+00,
    1.2164506e+00, -9.9823111e-01,  1.2027353e+00,  6.5750307e-01,
    1.1175835e+00, -2.5450301e+00,  7.3615307e-01, -1.0190933e+00,
    1.1406710e+00, -2.5415364e-01,  1.3010387e-01,  7.6646322e-01,
    9.1366047e-01,  7.8956890e-01, -3.0049829e+00, -2.5239694e+00,
    -7.7558696e-01,  8.4529572e+00,  2.5918648e+00, -3.5599403e+00,
    3.0923345e+00,  2.6044922e+00, -1.6028594e+00, -1.5377835e+00,
    3.2857735e+00, -1.4508102e+00, -1.3289860e+00,  2.1657884e+00,
    -6.3718212e-01, -1.8625083e+00, -1.9739190e-01,  9.3086131e-02,
    1.1010321e+00, -6.9307423e+00,  4.5712575e-01,  4.5712575e-01,
    4.5712575e-01,  2.7599987e-01,  2.7599987e-01, -7.7182323e-01,
    2.0867847e-01, -1.6695501e+00,  2.4033701e-01,  7.6146469e+00,
    1.0000000e+00,  5.7118044e+00,  4.3188077e-01, -2.0089536e+00,
    1.0000000e+00,  8.7598534e+00,  2.4291695e+01, -2.5307436e+00,
    1.0000000e+00,  1.4989911e+00])
"""
learned_weight_with_classification /= \
    learned_weight_with_classification[
        list(meta_feature_mod.meta_feature_start.values())
    ].std()

original_weight = np.array([
    1.1, 1,  # Count
    0.5, 0.2, 0.3,  # Duplicates
    1.0, 0.5, 0.2,  # Last
    0.9, 0.5, 0.3,  # Max
    0.7, 0.5, 0.3,  # MeanVariance
    0.2, 0.2, 0.2,  # Mean
    1.6 + 10000, 0.5, 0.3,  # Median
    1.6, 0.5, 0.7,  # Min
    0.8, 0.5, 1.0,  # Mode
    0.3, 0.3, 0.4,  # NUnuique
    0.8, 0.8, 0.5,   # OneHotMean
    0.5, 0.7, 0.8,  # OneHotSum
    1.8, 0.5, 0.6,  # SumVariance
    0.6, 0.5, 0.3,  # Sum
    0.9,  # MainFactorizedNumerical
    1.5, 0.5, 0.5,  # FactorizedTargetEncoding
    2.7, 1.2,  # HistNeighborhoodTargetEncodingManipulation
    0.8, 0.9,  # MultiCategoricalTargetEncoding
    0.7, 0.8,  # TargetEncoding
    1.2, 0.5, 0.5,  # MaxDiffMin
    1,  # SequentialRegression
    1.1, 0.5, 0.2, 0.2,  # TimeDiffInSameTable
    0.7, 0.5, 0.5,  # TimeDiff
])

original_weight /= original_weight[
    list(meta_feature_mod.meta_feature_start.values())
].std()

learned_weight = \
    0.2 * original_weight \
    + 0.0 * learned_weight_with_plus_restrict_of_feature_importance \
    + 0.0 * learned_weight_with_plus_restrict_of_permutation_importance \
    + 0.8 * learned_weight_with_classification


def calculate_meta_priority(manipulation):
    meta_feature = meta_feature_mod.calculate_meta_feature(manipulation)
    return np.sum(meta_feature * learned_weight)
